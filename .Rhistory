getwd()
## Loading and preprocessing the data
library(tidyverse)
activity <- read.csv("activity.csv")
library("lubridate")
# 1. Code for reading in the dataset and/or processing the data
activity2 <- mutate(activity, ymd(date))
names(activity2)[4] <- "date2"
activity <- read.csv("activity.csv")
activity <- read.csv("./activity/activity.csv")
## Loading and preprocessing the data
library(tidyverse)
activity <- read.csv("./activity/activity.csv")
library("lubridate")
# 1. Code for reading in the dataset and/or processing the data
activity2 <- mutate(activity, ymd(date))
names(activity2)[4] <- "date2"
TotalStepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(TotalStepsPerDay, xlab='Total Steps Per day', ylab='Frequency', binwidth=400)
qplot(TotalStepsPerDay, xlab='Total Steps Per day', ylab='Frequency', binwidth=300)
qplot(TotalStepsPerDay, xlab='Total Steps Per day', ylab='Frequency', binwidth=100)
qplot(TotalStepsPerDay, xlab='Total Steps Per day', ylab='Frequency', binwidth=600)
ggplot(TotalStepsPerDay, geom="histogram")
TotalStepsPerDay
ggplot(data=TotalStepsPerDay, aes(TotalStepsPerDay)) + geom_histogram()
ggplot(data=as.list(TotalStepsPerDay), aes(as.list(TotalStepsPerDay)) + geom_histogram()
```
ggplot(data=as.list(TotalStepsPerDay), aes(as.list(TotalStepsPerDay)) + geom_histogram())
ggplot(data=as.dataframe(TotalStepsPerDay), as.dataframe(TotalStepsPerDay)) + geom_histogram())
ggplot(data=as.dataframe(TotalStepsPerDay)) + geom_histogram())
ggplot(data=as.dataframe(TotalStepsPerDay)) + geom_histogram()
ggplot(data=as.data.frame(TotalStepsPerDay)) + geom_histogram()
qplot(TotalStepsPerDay, xlab='Total Steps Per day', ylab='Frequency', binwidth=600)
qplot(TotalStepsPerDay, xlab='Total Steps Per Day', ylab='Frequency', binwidth=600)
?qplot
#3. Mean and median number of steps taken each day
# Mean
stepsByDayMean <- mean(TotalStepsPerDay)
stepsByDayMean
# Meidan
stepsByDayMedian <- median(TotalStepsPerDay)
stepsByDayMedian
#making a time series plot
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
timeMostSteps
numMissingValues <- length(which(is.na(activity$steps)))
activityDataImputed <- activity
activityDataImputed$steps <- impute(activity$steps, fun=mean) # impute {Hmisc} a function to use in computing the (single) imputed value from the non-NAs
library(Hmisc)
activityDataImputed <- activity
activityDataImputed$steps <- impute(activity$steps, fun=mean) # impute {Hmisc} a function to use in computing the (single) imputed value from the non-NAs
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
#and Calculate and report the mean and median total number of steps taken per day.
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
qplot(stepsByDayImputed, xlab='Total Steps IMputed Per Day', ylab='Frequency', binwidth=600)
activityDataImputed$dateType <-  ifelse(activityDataImputed$date2)$wday %in% c(0,6), 'weekend', 'weekday')
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date2)$wday %in% c(0,6), 'weekend', 'weekday')
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
activityDataImputed$Type <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
activityDataImputed$Type <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
averagedActivityDataImputed <- aggregate(steps ~ interval + Type, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
title("something")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
title("something")
?ggplot
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
ggtitle("something")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
labs(title = "New plot title")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# 1. Code for reading in the dataset and/or processing the data
library("tidyverse")
library("lubridate")
activity <- read.csv("./activity/activity.csv")
activity2 <- mutate(activity, ymd(date))
names(activity2)[4] <- "date2"
# Chunk 3
TotalStepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
# report the total steps per day
TotalStepsPerDay
# Chunk 4
#2.Histogram of the total number of steps taken each day
qplot(TotalStepsPerDay, xlab='Total Steps Per Day', ylab='Frequency', binwidth=600)
# Chunk 5
#3. Mean and median number of steps taken each day
# Mean
stepsByDayMean <- mean(TotalStepsPerDay)
stepsByDayMean
# Meidan
stepsByDayMedian <- median(TotalStepsPerDay)
stepsByDayMedian
# Chunk 6
#making a time series plot
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
# Chunk 7
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
# maximum number of steps is
timeMostSteps
# Chunk 8
numissingValues <- length(which(is.na(activity$steps)))
# Chunk 9
library(scales)
library(Hmisc)
activityDataImputed <- activity
activityDataImputed$steps <- impute(activity$steps, fun=mean) # impute {Hmisc} a function to use in computing the (single) imputed value from the non-NAs
# Chunk 10
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
#Make a histogram of the total number of steps taken each day
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total Steps IMputed Per Day', ylab='Frequency', binwidth=600)
#and Calculate and report the mean and median total number of steps taken per day.
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
# Chunk 11
# Chunk 12
# Create a new factor variable in the dataset with two levels – “weekdays” and “weekends”
activityDataImputed$Type <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
## Make a panel plot containing a time series plot
averagedActivityDataImputed <- aggregate(steps ~ interval + Type, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(Type ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
labs(title = "New plot title")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
labs(title = "New plot title")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "New plot title")
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of the partern between weekdays and weekends")
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averageStepsPerTimeBlock
head(averageStepsPerTimeBlock)
tail(averageStepsPerTimeBlock)
timeMostSteps
numissingValues
missing <- is.na(activity$steps)
table(missing)
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
#Make a histogram of the total number of steps taken each day
stepsByDayImputed <- tapply(activityImputed$steps, activityImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total Steps IMputed Per Day', ylab='Frequency', binwidth=600)
#and Calculate and report the mean and median total number of steps taken per day.
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
# Create a new factor variable in the dataset with two levels – “weekdays” and “weekends”
activityImputed$Type <-  ifelse(as.POSIXlt(activityImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
## Make a panel plot containing a time series plot
averagedActivityDataImputed <- aggregate(steps ~ interval + Type, data=activityImputed, mean)
ggplot(averagedActivityImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of the parterns between weekdays and weekends")
activityImputed <- activity
activityImputed$steps <- impute(activity$steps, fun=mean) # impute {Hmisc} a function to use in computing the (single) imputed value from the non-NAs
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
#Make a histogram of the total number of steps taken each day
stepsByDayImputed <- tapply(activityImputed$steps, activityImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total Steps IMputed Per Day', ylab='Frequency', binwidth=600)
#and Calculate and report the mean and median total number of steps taken per day.
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
# Create a new factor variable in the dataset with two levels – “weekdays” and “weekends”
activityImputed$Type <-  ifelse(as.POSIXlt(activityImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
## Make a panel plot containing a time series plot
averagedActivityDataImputed <- aggregate(steps ~ interval + Type, data=activityImputed, mean)
ggplot(averagedActivityImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of the parterns between weekdays and weekends")
averagedActivityDataImputed <- aggregate(steps ~ interval + Type, data=activityImputed, mean)
averagedActivityImputed <- aggregate(steps ~ interval + Type, data=activityImputed, mean)
ggplot(averagedActivityImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of the parterns between weekdays and weekends")
# Create a new factor variable in the dataset with two levels – “weekdays” and “weekends”
activityImputed$Type <-  ifelse(as.POSIXlt(activityImputed$date)$wday %in% c(0,6), 'weekends', 'weekdays')
## Make a panel plot containing a time series plot
averagedActivityImputed <- aggregate(steps ~ interval + Type, data=activityImputed, mean)
ggplot(averagedActivityImputed, aes(interval, steps)) +
geom_line() +
facet_grid(. ~ Type) +
xlab("5-minute interval") +
ylab("avarage number of steps") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Comparison of the parterns between weekdays and weekends")
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
(stepsByDayMeanImputed <- mean(stepsByDayImputed))
(stepsByDayMeanImputed <- mean(stepsByDayImputed))
(stepsByDayMedianImputed <- median(stepsByDayImputed))
(stepsByDayMedianImputed <- median(stepsByDayImputed))
(stepsByDayMeanImputed <- mean(stepsByDayImputed))
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
timeMostSteps
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
timeMostSteps
